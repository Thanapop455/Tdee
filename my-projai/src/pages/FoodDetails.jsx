import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { readFood } from "../api/Food";
import useStoregobal from "../store/storegobal";
import "./FoodDetails.css";

export default function FoodDetails() {
  const { id } = useParams();
  const token = useStoregobal((state) => state.token);
  const [food, setFood] = useState(null);
  const [serving, setServing] = useState(1);

  useEffect(() => {
    fetchFoodDetails();
  }, []);

  const fetchFoodDetails = async () => {
    try {
      const res = await readFood(token, id);
      setFood(res.data);
    } catch (err) {
      console.error("Error fetching food details:", err);
    }
  };

  const handleServingChange = (value) => {
    setServing((prev) => Math.max(1, prev + value));
  };

  return (
    <div className="food-details-container">
      {food ? (
        <>
          <div className="food-header">
            <img
              src={
                food.images.length > 0 ? food.images[0].url : "/no-image.png"
              }
              alt={food.title}
              className="food-image"
            />
            <div className="food-info">
              <h1>{food.title}</h1>
              <h2 className="calorie-count">
                {food.calorie * serving} <span>Calories</span>
              </h2>

              <div className="serving-controls">
                <button onClick={() => handleServingChange(-1)}>-</button>
                <span>{serving}</span>
                <button onClick={() => handleServingChange(1)}>+</button>
              </div>
            </div>
          </div>

          <div className="food-details-content">
            {/* üî• ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç */}
            <div className="burning-methods">
              <h3>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç {food.calorie * serving} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</h3>
              <div className="burning-grid">
                <div className="burning-card">
                  <span className="icon">üö∂</span>
                  <span className="text">‡πÄ‡∏î‡∏¥‡∏ô</span>
                  <span className="minutes">
                    {Math.ceil((food.calorie * serving) / 3)} ‡∏ô‡∏≤‡∏ó‡∏µ
                  </span>
                </div>
                <div className="burning-card">
                  <span className="icon">üö¥</span>
                  <span className="text">‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô</span>
                  <span className="minutes">
                    {Math.ceil((food.calorie * serving) / 5)} ‡∏ô‡∏≤‡∏ó‡∏µ
                  </span>
                </div>
                <div className="burning-card">
                  <span className="icon">üèÉ</span>
                  <span className="text">‡∏ß‡∏¥‡πà‡∏á</span>
                  <span className="minutes">
                    {Math.ceil((food.calorie * serving) / 6)} ‡∏ô‡∏≤‡∏ó‡∏µ
                  </span>
                </div>
                <div className="burning-card">
                  <span className="icon">üèä</span>
                  <span className="text">‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥</span>
                  <span className="minutes">
                    {Math.ceil((food.calorie * serving) / 9)} ‡∏ô‡∏≤‡∏ó‡∏µ
                  </span>
                </div>
              </div>
            </div>

            {/* üîπ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ */}
            <div className="nutrition-container">
              <h3 className="nutrition-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£</h3>
              <p className="nutrition-food-name">{food.title}</p>
              <p className="nutrition-serving">
                ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {food.servingSize}
              </p>

              <hr className="divider" />

              <p className="nutrition-label">‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</p>
              <div className="nutrition-content">
                <div className="nutrition-item">
                  <span>Calories</span>
                  <span className="nutrition-value">
                    {food.calorie * serving}
                  </span>
                </div>
                <div className="nutrition-item">
                  <span>Fat</span>
                  <span className="nutrition-value">
                    {(food.fat * serving).toFixed(1)} g
                  </span>
                </div>
                <div className="nutrition-item">
                  <span>Carbohydrate</span>
                  <span className="nutrition-value">
                    {(food.carbohydrate * serving).toFixed(1)} g
                  </span>
                </div>
                <div className="nutrition-item">
                  <span>Protein</span>
                  <span className="nutrition-value">
                    {(food.protein * serving).toFixed(1)} g
                  </span>
                </div>
              </div>

              <p className="nutrition-note">
                *‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà 2,000 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
              </p>

              <hr className="divider" />

              <p className="nutrition-source">
                ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: {food.source || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
              </p>
            </div>
          </div>
        </>
      ) : (
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
      )}
    </div>
  );
}
